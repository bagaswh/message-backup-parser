!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){"use strict";n.d(t,"a",function(){return i});var i=function(){function e(){}return e.defineLocale=function(e,t,n){return this.store[e]||(this.store[e]={}),this.store[e][t]=n,this.store[e][t]},e.getAllLocales=function(){return this.store},e.getLocalesByAppName=function(e){return this.store[e]},e.getLocalesByLang=function(e){var t,n={};for(var i in this.store)for(var a in this.store[i])e==a&&(n[i]||(n[i]={}),n[i]=((t={})[e]=this.store[i][e],t));return n},e.getLocale=function(e,t){return this.store[e][t]},e.store={},e}(),a=n(4);a.keys().forEach(function(e){a(e)})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var i=function(){function e(){}return e.definePatterns=function(e,t){return this.store[e]||(this.store[e]=t),this.store[e]},e.getAllPatterns=function(){return this.store},e.getPatterns=function(e,t){var n=this.store[e];return n?n[t]:null},e.store={},e}(),a=n(10);a.keys().forEach(function(e){a(e)})},function(e,t){},function(e,t){e.exports=require("fs")},function(e,t,n){var i={"./line/locales/en.ts":5,"./line/locales/id.ts":6,"./line/locales/locale-line.ts":7,"./whatsapp/locales/en.ts":8,"./whatsapp/locales/id.ts":9,"./whatsapp/locales/locale-whatsapp":2,"./whatsapp/locales/locale-whatsapp.ts":2};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}a.keys=function(){return Object.keys(i)},a.resolve=s,e.exports=a,a.id=4},function(e,t,n){"use strict";n.r(t),n(0).a.defineLocale("line","en",{firstLineSignature:"Chat history with",beginningFile:"Chat history with",dateSaved:"Saved on"})},function(e,t,n){"use strict";n.r(t),n(0).a.defineLocale("line","id",{firstLineSignature:"Riwayat obrolan dengan",beginningFile:"Riwayat obrolan dengan",dateSaved:"Waktu disimpan"})},function(e,t){},function(e,t,n){"use strict";n.r(t),n(0).a.defineLocale("whatsapp","en",{firstLineSignature:"Messages to this chat and calls are now secured with end-to-end encryption.?(?: Click for more info.)?",encryptionNotification:"Messages to this chat and calls are now secured with end-to-end encryption.?(?: Click for more info.)?",missedCall:"Missed (?:video|voice) call.",deletedMessage:"(This message was deleted)|(You deleted this message)",attachedContact:"attached",attachedMedia:"attached",attachedDocument:"attached",location:"location"})},function(e,t,n){"use strict";n.r(t),n(0).a.defineLocale("whatsapp","id",{firstLineSignature:"Pesan yang dikirim ke chat ini dan panggilan kini diamankan dengan enkripsi end-to-end.(?: Ketuk untuk info selengkapnya.)?",encryptionNotification:"Pesan yang dikirim ke chat ini dan panggilan kini diamankan dengan enkripsi end-to-end.(?: Ketuk untuk info selengkapnya.)?",missedCall:"Missed (?:video|voice) call",deletedMessage:"(Pesan ini telah dihapus)|(Anda telah menghapus pesan ini)",attachedContact:"\\(?(?:file ?)?terlampir\\)?",attachedMedia:"\\(?(?:file ?)?terlampir\\)?",attachedDocument:"\\(?(?:file ?)?terlampir\\)?",location:"lokasi"})},function(e,t,n){var i={"./line/patterns-line.ts":11,"./whatsapp/patterns-whatsapp.ts":12};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}a.keys=function(){return Object.keys(i)},a.resolve=s,e.exports=a,a.id=10},function(e,t,n){"use strict";n.r(t),n.d(t,"PatternsLINE",function(){return a});var i=n(1),a={ios:{firstLineSignature:"\\[LINE\\] {{fs}} ([\\S\\s]+)",beginningFile:"\\[LINE\\] {{fs}} ([\\S\\s]+)",dateSaved:"{{fs}}(?:\\:|：) ?((\\d{1,2})\\/(\\d{1,2})\\/(\\d{4,})) (\\d{1,2}\\.\\d{1,2})",dateBegin:"(\\w+)\\, ((\\d{1,2})\\/(\\d{1,2})\\/(\\d{4,}))",messageLine:"(\\d{1,2}\\:\\d{1,2})\\t([\\S\\s]+)\\t([\\S\\s]+)",alternateMessageLine:"(\\d{1,2}\\:\\d{1,2})\\t([\\S\\s]+? left the chat.)",toDateBeginString:function(e){return e[1]+", "+e[4]+"/"+e[3]+"/"+e[5]},toDateSavedString:function(e){return e[3]+"/"+e[2]+"/"+e[4]+" "+e[5].replace(".",":")}},android:{firstLineSignature:"{{fs}} ([\\S\\s]+)( ?:\\[LINE\\])?",beginningFile:"{{fs}} ([\\S\\s]+)( ?:\\[LINE\\])?",dateSaved:"{{fs}}(?:\\:|：) ?((\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})) (\\d{1,2}\\:\\d{1,2})",dateBegin:"((\\d{4})/(\\d{1,2})/(\\d{1,2}))\\((\\w+)",messageLine:"(\\d{1,2}\\:\\d{1,2})\\t([\\S\\s]+)\\t([\\S\\s]+)",alternateMessageLine:"(\\d{1,2}\\:\\d{1,2})\\t([\\S\\s]+?) left the chat.",toDateBeginString:function(e){return e[5]+", "+e[3]+"/"+e[4]+"/"+e[2]},toDateSavedString:function(e){return e[3]+"/"+e[4]+"/"+e[2]+" "+e[5]}}};i.a.definePatterns("line",a)},function(e,t,n){"use strict";n.r(t),n.d(t,"PatternsWhatsApp",function(){return r});var i=n(1),a="\\[(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2} \\d{1,2}.\\d{1,2}.\\d{1,2})\\] ([\\S\\s]+?):",s="(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2} \\d{1,2}.\\d{1,2}) - ([\\S\\s]+?): ",r={ios:{firstLineSignature:a+" ‎({{fs}})",encryptionNotification:a+" ‎({{fs}})",missedCall:a+" ‎({{fs}})",deletedMessage:a+" ‎({{fs}})",attachedContact:"‎"+a+" ‎<({{fs}}: ((\\d{8})-([\\S\\s]+?).(vcf)))>",attachedDocument:"‎"+a+" ([\\S\\s]+)? ‎<({{fs}}: ((\\d{8})-([\\S\\s]+?).([a-z0-9]+)))>",attachedMedia:"‎"+a+" ‎<({{fs}}: ((\\d{8})-([\\S\\s]+?)(?:-(\\d{4})-(\\d{1,2})-(\\d{1,2})-(\\d{1,2})-(\\d{1,2})-(\\d{1,2}))?.([a-z0-9]+)))>",location:a+" ([\\S\\s]+): (https://maps.google.com/[\\S\\s]+)",regularMessageLine:a+" ([\\S\\s]+)"},android:{firstLineSignature:"(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2} \\d{1,2}.\\d{1,2}) - ({{fs}})",encryptionNotification:"(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2} \\d{1,2}.\\d{1,2}) - ({{fs}})",missedCall:s+"({{fs}})",deletedMessage:s+"({{fs}})",attachedContact:s+"‎(([\\S\\s]+?).(vcf)) ({{fs}})",attachedMedia:s+"‎(([A-Z]{3})-(\\d{8})-(WA\\d{4}).([a-z0-9]+?)) ({{fs}})",attachedDocument:s+"‎([\\S\\s]+?).([a-z0-9]+?) ({{fs}})",location:"[\\S\\s]\\r\\n|\\n[\\S\\s]\\r\\n|\\n{{fs}} : [\\S\\s]",regularMessageLine:s+"([\\S\\s]+)"}};i.a.definePatterns("whatsapp",r)},function(e,t){e.exports=require("http")},function(e,t,n){"use strict";n.r(t);var i=n(3);var a,s,r=function(){function e(){}return e._changeFormatSpecifier=function(e){this.formatSpecifier=e,this.regexFormatSpecifier=new RegExp(e,"g")},e.build=function(e,t){void 0===t&&(t={formatSpecifier:this.formatSpecifier,includeStartingBoundary:!1,includeEndBoundary:!1});for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var a=t.formatSpecifier,s=0,r=e.replace(new RegExp(a,"g"),function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];return n[s++]});t.includeStartingBoundary&&(r="^"+r),t.includeEndBoundary&&(r+="$");var o=function(e){var t,n=0;if(0===e.length)return n;for(t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return n}(r);return this.regexCache[o]||(this.regexCache[o]=new RegExp(r)),this.regexCache[o]},e.formatSpecifier="{{fs}}",e.regexFormatSpecifier=/\{\{fs\}\}/g,e.regexCache={},e}(),o=n(1),c=n(0),d=function(){function e(e,t){this.source=e,this.fileInfo=t,this.index=0,this.patterns=o.a.getPatterns(t.appType,t.osType),this.regexStore=this.buildRegex(),this.data={chatName:"",chatParticipants:[],groups:[],totalMessages:0}}return e.prototype.buildRegex=function(){var e={};for(var t in this.patterns)if("function"!=typeof this.patterns[t]){var n=r.build(this.patterns[t],void 0,c.a.getLocale(this.fileInfo.appType,this.fileInfo.lang)[t]);e[t]=n}return e},e}(),f=(a=function(e,t){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}a(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.source=t,i.fileInfo=n,i.currentDate="",i.setChatName(),i}return f(t,e),t.prototype.setChatName=function(){var e="ios"==this.fileInfo.osType?0:1,t=this.source[e].match(this.regexStore.encryptionNotification);t&&(this.data.chatName=t[2])},t.prototype.parseAttachedMediaAndroid=function(e,t){var n,i={fullFileName:"",fileID:"",fileType:"",fileName:"",contactName:"",fileExtension:""};n=t.slice(3),i.fullFileName=n[0],i.fileType=n[1],"attachedMedia"==e?(i.fileExtension=t[7],i.fileID=t[6]):"attachedContact"==e?(i.fileExtension=t[5],i.contactName=t[4]):"attachedDocument"==e&&(i.fileExtension=t[4]);var a={};for(var s in i)i[s]&&(a[s]=i[s]);return a},t.prototype.parseAttachedMediaIOS=function(e,t){var n,i={fullFileName:"",fileID:"",fileType:"",fileName:"",contactName:"",fileExtension:""};if("attachedMedia"==e){var a=t.slice(4);i.fullFileName=a[0],i.fileID=a[1],i.fileType=a[2],i.fileExtension=a[9]}"attachedDocument"==e&&(n=(a=t.slice(5)).slice(),i.fullFileName=n[0],i.fileID=n[1],i.fileName=n[2],i.fileExtension=n[3]);if("attachedContact"==e){a=t.slice(4);i.fullFileName=a[0],i.fileID=a[1],i.contactName=a[2],i.fileExtension=a[3]}var s={};for(var r in i)i[r]&&(s[r]=i[r]);return s},t.prototype.scan=function(){for(var e;this.index!=this.source.length-1;){var t=this.source[this.index],n=void 0,i=!1;for(var a in this.regexStore)if(n=t.match(this.regexStore[a])){i=!0;var s=void 0,r=void 0,o=void 0;s=(e=n.slice(1))[0],r=e[1],o=e[2],0==this.index&&"android"==this.fileInfo.osType&&(r="",o=n[2]);var c=s.split(" ")[0];this.data.chatParticipants.indexOf(r)<0&&""!=r&&this.data.chatParticipants.push(r);var d={dateSent:s,sender:r,messageContent:o,messageType:a};a.match(/^attached/)&&(d.additionalInfo="ios"==this.fileInfo.osType?this.parseAttachedMediaIOS(a,n):this.parseAttachedMediaAndroid(a,n)),this.currentDate!==c?(this.data.groups.push({dateBegin:c,messages:[d]}),this.currentDate=c):this.data.groups[this.data.groups.length-1].messages.push(d),this.data.totalMessages++;break}if(!i){var f=this.data.groups,u=f[f.length-1].messages;u[u.length-1].messageContent+="\n"+t}this.index++}return this.data},t}(d),l=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),h={line:function(e){function t(t,n){var i=e.call(this,t,n)||this;return i.source=t,i.fileInfo=n,i.data.dateSaved="",i.setChatName(),i.setSavedDate(),i}return l(t,e),t.prototype.setChatName=function(){var e=this.source[this.index++].match(this.regexStore.beginningFile);e&&(this.data.chatName=e[1])},t.prototype.matchChatName=function(){var e=this;this.data.chatParticipants.forEach(function(t){e.data.chatName.match(t)&&(e.data.chatName=t)})},t.prototype.setSavedDate=function(){var e=this.source[this.index++],t=this.patterns.toDateSavedString(e.match(this.regexStore.dateSaved));t&&(this.data.dateSaved=t),this.index++},t.prototype.scan=function(){for(;this.index!=this.source.length-1;)this.data.groups.push(this.scanMessagesInGroup());return this.matchChatName(),this.data},t.prototype.scanMessagesInGroup=function(){var e={dateBegin:"",messages:[]},t=this.patterns.toDateBeginString(this.source[this.index++].match(this.regexStore.dateBegin));for(e.dateBegin=t;!this.source[this.index].match(this.regexStore.dateBegin)&&this.index!=this.source.length-1;){var n=this.source[this.index].match(this.regexStore.messageLine);if(n){this.data.totalMessages++;var i=n.slice(1,4),a=i[0],s=i[1],r=i[2];this.data.chatParticipants.indexOf(s)<0&&this.data.chatParticipants.push(s),e.messages.push({dateSent:a,sender:s,messageContent:r})}this.source[this.index].match(/[\S\s]/)&&!n&&e.messages[e.messages.length-1]&&(e.messages[e.messages.length-1].messageContent+="\n"+this.source[this.index]),!n&&(n=this.source[this.index].match(this.regexStore.alternateMessageLine))&&e.messages.push({dateSent:n[1],messageContent:n[2]}),this.index++}return e},t}(d),whatsapp:u},p=new(function(){function e(e){this.source=e,this.splitSource=e.split(/\r\n|\n/),this.fileInfo=this._getFileInfo()}return e.prototype._getFileInfo=function(){var e={appType:null,osType:null,lang:null},t=this.splitSource[0],n=o.a.getAllPatterns();for(var i in n){var a=c.a.getLocalesByAppName(i);for(var s in a)for(var d in n[i]){var f=r.build(n[i][d].firstLineSignature,void 0,c.a.getLocale(i,s).firstLineSignature);if(t.match(f))return e={appType:i,osType:d,lang:s}}}return e},e.prototype.parse=function(){var e=h[this.fileInfo.appType];return e?new e(this.splitSource,this.fileInfo).scan():null},e}())((s="examples/wa_android_bege_id/_chat.txt",Object(i.readFileSync)(s,"utf-8"))).parse();n(13).createServer(function(e,t){t.writeHead(200,{"Content-Type":"text/html"});var n="<script>console.log(("+JSON.stringify(p)+"));<\/script>";t.end(n)}).listen(1337,"127.0.0.1")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,